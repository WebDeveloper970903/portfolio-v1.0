

.grid-example {
	background-color: $color-primary-grey-dark; 
}
.row {
	border: 2px solid orange;
	background-color: #eee;
  
	/* 1140px / 10 = 114rem
	* max-width: if available space the row will take up 1140px, otherwise (if the viewport is smaller than 1140px) row = 100% of available space */
	
	// Adding variables
	max-width: $grid-width; 
	margin: 0 auto; 
	// &:last-child {	margin-bottom: 0; }
	&:not(:last-child) { 
	  margin-bottom: $gutter-vertical;
	}
	.col-1-of-1 {
		width: 100%;
		text-align: center;
	}
	// add mixin to clear floats 
	@include clearfix;
	
	// DRY practice with the attribute selector: selecting elems "initial classes of" (^) - also "ending with" ($) or "containing" (*) 
	[class^="col"] {
		background-color: orangered;
		border: 1px solid lighten($color: green, $amount: 0%);
		text-align: center;
		float: left;
		/* apply right-margin on all elems except the last elem */
		&:not(:last-child) {
			margin-right: $gutter-horizontal;
		}
	}
	.col-1-of-2 {
		/* (width - horizontal gutter / 2) */ 
		width: calc((100% - #{$gutter-horizontal}) / 2);
	}
	// 1 of 3 
	.col-1-of-3 {
		width: calc((100% - (#{$gutter-horizontal} *2)) / 3);
	}
	// 1 of 3 
	.col-1-of-3 {
		width: calc((100% - (#{$gutter-horizontal} *2)) / 3);
	}
	// 2 of 3
	.col-2-of-3 {
		/* (1 of 3 + gutter + 1 of 3) */
		width: calc( 2 * ((100% - 2 * #{$gutter-horizontal}) / 3) + #{$gutter-horizontal});
	}
	// 1 of 4 
	.col-1-of-4 {
		width: calc((100% - (#{$gutter-horizontal} *3)) / 4);
	}
	// 2 of 4 
	.col-2-of-4 {
		/* (1 of 4 + gutter + 1 of 4) */
		width: calc( 2 * ((100% - (#{$gutter-horizontal}) * 3)) / 4 + #{$gutter-horizontal});
	}
	// 3 of 4 
	.col-3-of-4 {
		/* ( (1 of 4) + gutter + (1 of 4) + gutter + (1 of 4)) */
		width: calc( 3 * (100% - (#{$gutter-horizontal} *3)) / 4 + (2 * #{$gutter-horizontal}));
	}
}

